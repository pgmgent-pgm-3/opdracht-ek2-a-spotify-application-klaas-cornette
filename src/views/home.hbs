<body class="home">

    <div class="background__right background__left ">

    </div>
{{> header}}

  <main class="player">
    <div class="buttonrow">
      <button id="startbutton">Press to load songs</button>
      <button id="startbuttonPlaylist">Press to load playlist</button>
    </div>
    <h1>Play song</h1>
    <ul>
  {{#each song}}
  <li class="song" data-loading="true">
            <a href="/assets/sound/count.mp3" class="track">{{name}}</a>
            <p class="loading-text">Loading...</p>
            <button
              data-playing="false"
              class="playbutton"
            >
              <img src="assets/img/play.png" alt="play">
            </button>
          </li>
  {{/each}}
  </ul>
  <h1>Play your playlist {{user.playlist.name}}</h1>
  <ul>
  {{#each playlist.song}}
  <li class="playlist" data-loading="true">
            <a href="/assets/sound/count.mp3" class="track">{{name}}</a>
            <p class="loading-text">Loading...</p>
            <button
              data-playing="false"
              class="playbutton"
            >
              <img src="assets/img/play.png" alt="play">
            </button>
          </li>
  {{/each}}
  </ul>
</main>

<script>
//bron code
//https://github.com/mdn/webaudio-examples/blob/main/multi-track/index.html
      let audioCtx = null;
      const startButton = document.querySelector("#startbutton");
      const startButtonPlaylist = document.querySelector("#startbuttonPlaylist");
      const trackEls = document.querySelectorAll(".song");
      const trackElsPlaylist = document.querySelectorAll(".playlist");
      async function getFile(filepath) {
        const response = await fetch(filepath);
        const arrayBuffer = await response.arrayBuffer();
        const audioBuffer = await audioCtx.decodeAudioData(arrayBuffer);
        return audioBuffer;
      }
      async function loadFile(filePath) {
        const track = await getFile(filePath);
        return track;
      }
      let offset = 0;
      let trackSource;
      function playTrack(audioBuffer, offset) {
        trackSource = new AudioBufferSourceNode(audioCtx, {
          buffer: audioBuffer,
        });
        trackSource.connect(audioCtx.destination);

        if (offset == 0) {
          trackSource.start();
          offset = audioCtx.currentTime;
        } else {
          trackSource.start(0, audioCtx.currentTime - offset);
        }
        return trackSource;
      }
      function playNextTrack(index) {
        const trackElsPlaylistArray = Array.from(trackElsPlaylist);
        const currentIndex = index + 1;
        if (currentIndex < trackElsPlaylistArray.length) {
          const nextTrackEl = trackElsPlaylistArray[currentIndex];
          const playButton = nextTrackEl.querySelector(".playbutton");

          playButton.click(); 
        }
      }

      startButton.addEventListener("click", () => {
        audioCtx = new AudioContext();
        document.querySelector("#startbutton").hidden = true;

        trackEls.forEach((el, i) => {
          const anchor = el.querySelector("a");
          const loadText = el.querySelector("p");
          const playButton = el.querySelector(".playbutton");
          loadFile(anchor.href).then((track) => {
            el.dataset.loading = "false";
            loadText.style.display = "none";
            playButton.style.display = "inline-block";
            const trackOffset = 0; 
            playButton.addEventListener("click", () => {
              if (audioCtx.state === "suspended") {
                audioCtx.resume();
              }
              playTrack(track, trackOffset);
              playButton.dataset.playing = true;
            });
          });
        });
      });
        
      startButtonPlaylist.addEventListener("click", () => {
        audioCtx = new AudioContext();
        document.querySelector("#startbuttonPlaylist").hidden = true;
        trackElsPlaylist.forEach((el, i) => {
            const anchor = el.querySelector("a");
            const loadText = el.querySelector("p");
            const playButton = el.querySelector(".playbutton");
            loadFile(anchor.href).then((track) => {
              el.dataset.loading = "false";
              loadText.style.display = "none";
              playButton.style.display = "inline-block";
              const trackOffset = 0; 
              playButton.addEventListener("click", () => {
                if (audioCtx.state === "suspended") {
                  audioCtx.resume();
              }
              playTrack(track, trackOffset);
              playButton.dataset.playing = true;
              trackSource.onended = () => {
                console.log('track ended')
                playNextTrack(i);
              };
            });
          });
        });
      });
</script>
</body>

